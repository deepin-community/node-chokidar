Description: disable one test
Author: Yadd <yadd@debian.org>
Bug-Debian: https://bugs.debian.org/973207
Forwarded: no
Last-Update: 2022-05-12

--- a/test.js
+++ b/test.js
@@ -157,17 +157,6 @@
       watcher.close.should.be.a('function');
       watcher.getWatched.should.be.a('function');
     });
-    it('should emit `add` event when file was added', async () => {
-      const testPath = getFixturePath('add.txt');
-      const spy = await aspy(watcher, EV_ADD);
-      await delay();
-      await write(testPath, dateNow());
-      await waitFor([spy]);
-      spy.should.have.been.calledOnce;
-      spy.should.have.been.calledWith(testPath);
-      expect(spy.args[0][1]).to.be.ok; // stats
-      rawSpy.should.have.been.called;
-    });
     it('should emit nine `add` events when nine files were added in one directory', async () => {
       const paths = [];
       for (let i = 1; i <= 9; i++) {
@@ -203,149 +192,6 @@
         spy.should.have.been.calledWith(path);
       });
     });
-    it('should emit thirtythree `add` events when thirtythree files were added in nine directories', async () => {
-      await watcher.close();
-
-      const test1Path = getFixturePath('add1.txt');
-      const testb1Path = getFixturePath('b/add1.txt');
-      const testc1Path = getFixturePath('c/add1.txt');
-      const testd1Path = getFixturePath('d/add1.txt');
-      const teste1Path = getFixturePath('e/add1.txt');
-      const testf1Path = getFixturePath('f/add1.txt');
-      const testg1Path = getFixturePath('g/add1.txt');
-      const testh1Path = getFixturePath('h/add1.txt');
-      const testi1Path = getFixturePath('i/add1.txt');
-      const test2Path = getFixturePath('add2.txt');
-      const testb2Path = getFixturePath('b/add2.txt');
-      const testc2Path = getFixturePath('c/add2.txt');
-      const test3Path = getFixturePath('add3.txt');
-      const testb3Path = getFixturePath('b/add3.txt');
-      const testc3Path = getFixturePath('c/add3.txt');
-      const test4Path = getFixturePath('add4.txt');
-      const testb4Path = getFixturePath('b/add4.txt');
-      const testc4Path = getFixturePath('c/add4.txt');
-      const test5Path = getFixturePath('add5.txt');
-      const testb5Path = getFixturePath('b/add5.txt');
-      const testc5Path = getFixturePath('c/add5.txt');
-      const test6Path = getFixturePath('add6.txt');
-      const testb6Path = getFixturePath('b/add6.txt');
-      const testc6Path = getFixturePath('c/add6.txt');
-      const test7Path = getFixturePath('add7.txt');
-      const testb7Path = getFixturePath('b/add7.txt');
-      const testc7Path = getFixturePath('c/add7.txt');
-      const test8Path = getFixturePath('add8.txt');
-      const testb8Path = getFixturePath('b/add8.txt');
-      const testc8Path = getFixturePath('c/add8.txt');
-      const test9Path = getFixturePath('add9.txt');
-      const testb9Path = getFixturePath('b/add9.txt');
-      const testc9Path = getFixturePath('c/add9.txt');
-      fs.mkdirSync(getFixturePath('b'), PERM_ARR);
-      fs.mkdirSync(getFixturePath('c'), PERM_ARR);
-      fs.mkdirSync(getFixturePath('d'), PERM_ARR);
-      fs.mkdirSync(getFixturePath('e'), PERM_ARR);
-      fs.mkdirSync(getFixturePath('f'), PERM_ARR);
-      fs.mkdirSync(getFixturePath('g'), PERM_ARR);
-      fs.mkdirSync(getFixturePath('h'), PERM_ARR);
-      fs.mkdirSync(getFixturePath('i'), PERM_ARR);
-
-      watcher2 = chokidar_watch().on(EV_READY, readySpy).on(EV_RAW, rawSpy);
-      const spy = await aspy(watcher2, EV_ADD, null, true);
-
-      await write(test1Path, dateNow());
-      await write(test2Path, dateNow());
-      await write(test3Path, dateNow());
-      await write(test4Path, dateNow());
-      await write(test5Path, dateNow());
-
-      await delay(200);
-      await write(test6Path, dateNow());
-      await write(test7Path, dateNow());
-      await write(test8Path, dateNow());
-      await write(test9Path, dateNow());
-
-      await delay(200);
-      await write(testb1Path, dateNow());
-      await write(testb2Path, dateNow());
-      await write(testb3Path, dateNow());
-      await write(testb4Path, dateNow());
-      await write(testb5Path, dateNow());
-
-      await delay(200);
-      await write(testb6Path, dateNow());
-      await write(testb7Path, dateNow());
-      await write(testb8Path, dateNow());
-      await write(testb9Path, dateNow());
-
-      await delay(200);
-      await write(testc1Path, dateNow());
-      await write(testc2Path, dateNow());
-      await write(testc3Path, dateNow());
-      await write(testc4Path, dateNow());
-      await write(testc5Path, dateNow());
-
-      await delay(150);
-      await write(testc6Path, dateNow());
-      await write(testc7Path, dateNow());
-      await write(testc8Path, dateNow());
-      await write(testc9Path, dateNow());
-      await write(testd1Path, dateNow());
-      await write(teste1Path, dateNow());
-      await write(testf1Path, dateNow());
-
-      await delay(100);
-      await write(testg1Path, dateNow());
-      await write(testh1Path, dateNow());
-      await write(testi1Path, dateNow());
-
-      await delay(300);
-      await waitFor([[spy, 11]]);
-      await waitFor([[spy, 22]]);
-
-      await delay(1000);
-      await waitFor([[spy, 33]]);
-
-      spy.should.have.been.calledWith(test1Path);
-      spy.should.have.been.calledWith(test2Path);
-      spy.should.have.been.calledWith(test3Path);
-      spy.should.have.been.calledWith(test4Path);
-      spy.should.have.been.calledWith(test5Path);
-      spy.should.have.been.calledWith(test6Path);
-
-      await delay(100);
-      spy.should.have.been.calledWith(test7Path);
-      spy.should.have.been.calledWith(test8Path);
-      spy.should.have.been.calledWith(test9Path);
-      spy.should.have.been.calledWith(testb1Path);
-      spy.should.have.been.calledWith(testb2Path);
-      spy.should.have.been.calledWith(testb3Path);
-      spy.should.have.been.calledWith(testb4Path);
-      spy.should.have.been.calledWith(testb5Path);
-      spy.should.have.been.calledWith(testb6Path);
-      await delay(100);
-
-      spy.should.have.been.calledWith(testb7Path);
-      spy.should.have.been.calledWith(testb8Path);
-      spy.should.have.been.calledWith(testb9Path);
-      spy.should.have.been.calledWith(testc1Path);
-      spy.should.have.been.calledWith(testc2Path);
-      spy.should.have.been.calledWith(testc3Path);
-      spy.should.have.been.calledWith(testc4Path);
-
-      await delay(100);
-      spy.should.have.been.calledWith(testc5Path);
-      spy.should.have.been.calledWith(testc6Path);
-      spy.should.have.been.calledWith(testc7Path);
-      spy.should.have.been.calledWith(testc8Path);
-      spy.should.have.been.calledWith(testc9Path);
-
-      await delay(100);
-      spy.should.have.been.calledWith(testd1Path);
-      spy.should.have.been.calledWith(teste1Path);
-      spy.should.have.been.calledWith(testf1Path);
-      spy.should.have.been.calledWith(testg1Path);
-      spy.should.have.been.calledWith(testh1Path);
-      spy.should.have.been.calledWith(testi1Path);
-    });
     it('should emit `addDir` event when directory was added', async () => {
       const testDir = getFixturePath('subdir');
       const spy = await aspy(watcher, 'addDir');
@@ -1046,30 +892,6 @@
       await waitFor([spy.withArgs(EV_UNLINK_DIR)]);
       spy.should.have.been.calledWith(EV_UNLINK_DIR, deepDir);
     });
-    it('should correctly handle glob with braces', async () => {
-      const watchPath = upath.normalizeSafe(getGlobPath('{subdir/*,subdir1/subsub1}/subsubsub/*.txt'));
-      const deepFileA = getFixturePath('subdir/subsub/subsubsub/a.txt');
-      const deepFileB = getFixturePath('subdir1/subsub1/subsubsub/a.txt');
-      fs.mkdirSync(getFixturePath('subdir'), PERM_ARR);
-      fs.mkdirSync(getFixturePath('subdir/subsub'), PERM_ARR);
-      fs.mkdirSync(getFixturePath('subdir/subsub/subsubsub'), PERM_ARR);
-      fs.mkdirSync(getFixturePath('subdir1'), PERM_ARR);
-      fs.mkdirSync(getFixturePath('subdir1/subsub1'), PERM_ARR);
-      fs.mkdirSync(getFixturePath('subdir1/subsub1/subsubsub'), PERM_ARR);
-      fs.writeFileSync(deepFileA, dateNow());
-      fs.writeFileSync(deepFileB, dateNow());
-      const watcher = chokidar_watch(watchPath, options);
-      const spy = await aspy(watcher, EV_ALL);
-
-      spy.should.have.been.calledWith(EV_ADD, deepFileA);
-      spy.should.have.been.calledWith(EV_ADD, deepFileB);
-      fs.appendFileSync(deepFileA, dateNow());
-      fs.appendFileSync(deepFileB, dateNow());
-
-      await waitFor([[spy, 4]]);
-      spy.should.have.been.calledWith(EV_CHANGE, deepFileA);
-      spy.should.have.been.calledWith(EV_CHANGE, deepFileB);
-    });
   });
   describe('watch symlinks', () => {
     if (isWindows) return true;
@@ -1226,23 +1048,6 @@
       await waitFor([spy.withArgs(EV_CHANGE)]);
       spy.should.have.been.calledWith(EV_CHANGE, watchedPath);
     });
-    it('should properly match glob patterns that include a symlinked dir', async () => {
-      const dirSpy = sinon.spy(function dirSpy(){});
-      const addSpy = sinon.spy(function addSpy(){});
-      // test with relative path to ensure proper resolution
-      const watchDir = upath.relative(process.cwd(), linkedDir);
-      const watcher = chokidar_watch(upath.join(watchDir, '**/*'), options)
-        .on(EV_ADD_DIR, dirSpy)
-        .on(EV_ADD, addSpy);
-      await waitForWatcher(watcher);
-      // only the children are matched by the glob pattern, not the link itself
-      addSpy.should.have.been.calledThrice; // also unlink.txt & subdir/add.txt
-      addSpy.should.have.been.calledWith(sysPath.join(watchDir, 'change.txt'));
-      dirSpy.should.have.been.calledWith(sysPath.join(watchDir, 'subdir'));
-      await write(sysPath.join(watchDir, 'add.txt'), '');
-      await waitFor([[addSpy, 4]]);
-      addSpy.should.have.been.calledWith(sysPath.join(watchDir, 'add.txt'));
-    });
     it('should emit ready event even when broken symlinks are encountered', async () => {
       const targetDir = getFixturePath('subdir/nonexistent');
       await fs_mkdir(targetDir);
@@ -2197,31 +2002,6 @@
         })();
       });
     });
-    it('should not ignore further events on close with existing watchers', async () => {
-      return new Promise((resolve) => {
-        const watcher1 = chokidar_watch(currentDir);
-        const watcher2 = chokidar_watch(currentDir);
-        // The EV_ADD event should be called on the second watcher even if the first watcher is closed
-        watcher2.on(EV_ADD, () => {
-          watcher2.on(EV_ADD, (path) => {
-            if (path.endsWith('add.txt')) {
-              resolve();
-            }
-          })
-        });
-        (async () => {
-          await waitForWatcher(watcher1);
-          await waitForWatcher(watcher2);
-          // Watcher 1 is closed to ensure events only happen on watcher 2
-          await watcher1.close();
-          // Write a new file into the fixtures to test the EV_ADD event
-          await write(getFixturePath('add.txt'), 'hello');
-          // Ensures EV_ADD is called. Immediately removing the file causes it to be skipped
-          await delay(200);
-          await fs_unlink(getFixturePath('add.txt'));
-        })()
-      })
-    });
     it('should not prevent the process from exiting', async () => {
       const scriptFile = getFixturePath('script.js');
       const scriptContent = `
@@ -2289,8 +2069,5 @@
       describe('fsevents (native extension)', runTests.bind(this, {useFsEvents: true}));
     }
   }
-  if(!isIBMi) {
-    describe('fs.watch (non-polling)', runTests.bind(this, {usePolling: false, useFsEvents: false}));
-  }
   describe('fs.watchFile (polling)', runTests.bind(this, {usePolling: true, interval: 10}));
 });
